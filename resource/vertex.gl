#version 150

// in model coordinates
in vec3 position;
in vec3 normal;
in vec2 texcoord;

// in world coordinates
uniform vec3 lightpos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;

out vec2 Texcoord;

out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Normal_cameraspace;

// distance between light and the vertex
out float Distance;

void main()
{
    // pass fragment shader parameters
    Texcoord = texcoord;
    
    // Output position of the vertex, in clip space : MVP * position
    gl_Position = proj * view * model * vec4(position, 1.0);

    // Position of the vertex, in worldspace : M * position
    Position_worldspace = (model * vec4(position, 1.0)).xyz;

    // Vector that goes from the vertex to the camera, in camera space.
    // In camera space, the camera is at the origin (0,0,0).
    vec3 vertexPosition_cameraspace = ( view * model * vec4(position, 1.0)).xyz;
    EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

    // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
    vec3 LightPosition_cameraspace = ( view * vec4(lightpos, 1)).xyz;
    LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

    // Normal of the the vertex, in camera space
    // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
    Normal_cameraspace = (view * model * vec4(normal, 1.0)).xyz;

    Distance = distance(Position_worldspace, lightpos);
}
