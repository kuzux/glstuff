#version 150

in vec2 Texcoord;

in vec3 Position_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 Normal_cameraspace;

out vec4 outColor;

// in world coordinates
uniform vec3 lightpos;
uniform vec3 lightcolor;
uniform float lightpower;

// material properties
uniform vec3 mtl_ka;
uniform vec3 mtl_kd;
uniform vec3 mtl_ks;
uniform float mtl_ns;

uniform sampler2D tex;

void main()
{
    // Normal of the computed fragment, in camera space
    vec3 n = normalize(Normal_cameraspace);
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize(LightDirection_cameraspace);
    
    // Cosine of the angle between the normal and the light direction,
    // clamped above 0
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendicular to the triangle -> 0
    //  - light is behind the triangle -> 0
    float cosTheta = clamp(dot(n, l), 0, 1);

    // Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_cameraspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l,n);

    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosAlpha = clamp(dot(E, R),0, 1);

    // distance between the vertex and the light source
    float dist = distance(Position_worldspace, lightpos);

    vec4 ambient = vec4(mtl_ka, 1.0);
    vec4 diffuse = texture(tex, Texcoord) * vec4(lightcolor, 1.0) * lightpower / (dist * dist);
    vec4 specular = vec4(mtl_ks, 1.0) * vec4(lightcolor, 1.0) * pow(cosAlpha, mtl_ns) / (dist * dist);
    outColor = ambient + diffuse + specular;
}
